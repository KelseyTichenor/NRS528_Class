# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-03-01 13:59:19
"""
import arcpy
import os
# helps with file mgmt

# To allow overwriting outputs change overwriteOutput option to True.
arcpy.env.overwriteOutput = True

base_path_directory = "E:\Kelsey_Tichenor_NRS_528\GitHub\NRS528_Class\Class_6\Step_1_Data\Step_1_data"
arcpy.env.workspace = base_path_directory
# set directory first - doing it this way, this eliminates the need for hard coded filepaths and lets
# you actually do the 'change one line' bit of the coding challenge
# good coding practice and eliminates mistake potential


# INPUTS FOR THE SCRIPT
Roads = os.path.join(base_path_directory, "RI_Roads.shp") # THIS IS CALLING THE BASE PATH DIRECTORY YOU SET UP,
# WHERE EVERYTHING IS STORED! - This is called an os.path.join.
Places = os.path.join(base_path_directory, "Places.shp")
State_Boundary = os.path.join(base_path_directory, "State_Boundary_1997.shp")

# MAKE A TEMPORARY FOLDER - or else your folder structure's gonna get f***ed, and no one wants that.
if not os.path.exists(os.path.join(base_path_directory, "temporary_files")):
    os.mkdir(os.path.join(base_path_directory, "temporary_files"))
# if not = if this path doesn't exist

# Process: Buffer roads (Buffer) (analysis)
if not os.path.exists(os.path.join(base_path_directory, "temporary_files", "RI_Roads_Buffer.shp")):
    Buffered_Roads = os.path.join(base_path_directory, "RI_Roads_Buffer.shp")
    arcpy.analysis.Buffer(in_features=Roads,
                          out_feature_class=os.path.join(base_path_directory, "temporary_files", "RI_Roads_Buffer.shp"),
                          buffer_distance_or_field="10 Miles", dissolve_option="ALL")
    print("Roads buffered successfully!")
else:
    print("This already exists")

# Now copy the above code block and paste it further down in order to replicate what you did.

# Process: Buffer places (Buffer) (analysis)
if not os.path.exists(os.path.join(base_path_directory, "temporary_files", "RI_Places_Buffer.shp")):
    Buffered_Roads = os.path.join(base_path_directory, "RI_Places_Buffer.shp")
    arcpy.analysis.Buffer(in_features=Roads,
                          out_feature_class=os.path.join(base_path_directory, "temporary_files", "RI_Places_Buffer.shp"),
                          buffer_distance_or_field="10 Miles", dissolve_option="ALL")
    print("Places buffered successfully!")
else:
    print("This already exists")

# Process: Buffered data intersected (Intersect) (analysis)
if not os.path.exists(os.path.join(base_path_directory, "temporary_files", "RI_Roads_Buffer_Intersect.shp")):
    Buffered_Roads = os.path.join(base_path_directory, "RI_Roads_Buffer.shp")
    Buffered_Places = os.path.join(base_path_directory, "RI_Places_Buffer.shp")
    arcpy.analysis.Buffer(in_features=[[Buffered_Roads, ""], [Buffered_Places, ""]],
                          out_feature_class=os.path.join(base_path_directory, "temporary_files",
                                                         "RI_Roads_Buffer_Intersect.shp"))
    print("Roads buffered successfully!")
else:
    print("This already exists")

# Process: Clip (Clip) (analysis)
if not os.path.exists(os.path.join(base_path_directory, "temporary_files", "Suitable_Areas_For_Development.shp")):
    arcpy.analysis.Clip(in_features=os.path.join(base_path_directory, "temporary_files", "Intersected.shp"),
                        clip_features=State_Boundary,
                        out_feature_class=os.path.join(base_path_directory, "temporary_files",
                                                       "Suitable_Area_For_Development.shp"))
    print("Clipped Successfully!")
else:
    print("This already exists")